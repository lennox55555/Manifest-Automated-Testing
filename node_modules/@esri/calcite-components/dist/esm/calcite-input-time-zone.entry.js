/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.7.0
 */
import { r as registerInstance, c as createEvent, h, H as Host, a as getElement } from './index-165cd388.js';
import { c as connectLabel, d as disconnectLabel } from './label-b88198aa.js';
import { u as updateHostInteraction } from './interactive-5801a6e6.js';
import { c as connectLocalized, d as disconnectLocalized } from './locale-b09d220a.js';
import { u as updateMessages, c as connectMessages, d as disconnectMessages, s as setUpMessages } from './t9n-9a6203a1.js';
import { c as componentFocusable, s as setUpLoadableComponent, a as setComponentLoaded } from './loadable-d814078e.js';
import { c as connectForm, d as disconnectForm, a as afterConnectDefaultValueSet, H as HiddenFormInputSlot } from './form-c73d3da5.js';
import './dom-79f84f98.js';
import './guid-3f32a87e.js';
import './resources-4b333cce.js';
import './browser-612db93f.js';
import './key-120fe23c.js';
import './observers-200147a2.js';

const hourToMinutes = 60;
function getUserTimeZoneOffset() {
  const localDate = new Date();
  return localDate.getTimezoneOffset() * -1;
}
function getFallbackTimeZoneGroups() {
  const timeZoneOffsets = [
    -11, -10, -9.5, -9, -8, -7, -6, -5, -4, -3, -2.5, -2, -1, 0, 1, 2, 3, 3.5, 4, 4.5, 5, 6, 6.5, 7, 8, 8.75, 9, 9.5,
    10, 10.5, 11, 12, 12.75, 13, 14,
  ];
  return timeZoneOffsets.map((offset) => {
    return {
      offsetValue: offset * hourToMinutes,
      offsetLabel: toGMTLabel(offset),
    };
  });
}
/**
 * Exported for testing-purposes only
 *
 * @internal
 */
function toGMTLabel(offsetInHours) {
  return `GMT${offsetInHours === 0 ? "" : offsetInHours.toLocaleString("en", { signDisplay: "always" })}`;
}
let timeZoneGeneration;
async function generateTimeZoneGroups() {
  if (timeZoneGeneration) {
    return timeZoneGeneration;
  }
  timeZoneGeneration = Promise.resolve(getFallbackTimeZoneGroups());
  return timeZoneGeneration;
}

const inputTimeZoneCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-ui-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{display:block}:host([hidden]){display:none}[hidden]{display:none}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}::slotted(input[slot=hidden-form-input]){margin:0 !important;opacity:0 !important;outline:none !important;padding:0 !important;position:absolute !important;inset:0 !important;transform:none !important;-webkit-appearance:none !important;z-index:-1 !important}";

const InputTimeZone = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.calciteInputTimeZoneBeforeClose = createEvent(this, "calciteInputTimeZoneBeforeClose", 6);
    this.calciteInputTimeZoneBeforeOpen = createEvent(this, "calciteInputTimeZoneBeforeOpen", 6);
    this.calciteInputTimeZoneChange = createEvent(this, "calciteInputTimeZoneChange", 6);
    this.calciteInputTimeZoneClose = createEvent(this, "calciteInputTimeZoneClose", 6);
    this.calciteInputTimeZoneOpen = createEvent(this, "calciteInputTimeZoneOpen", 6);
    this.setComboboxRef = (el) => {
      this.comboboxEl = el;
    };
    this.onComboboxBeforeClose = (event) => {
      event.stopPropagation();
      this.calciteInputTimeZoneBeforeClose.emit();
    };
    this.onComboboxBeforeOpen = (event) => {
      event.stopPropagation();
      this.calciteInputTimeZoneBeforeOpen.emit();
    };
    this.onComboboxChange = (event) => {
      event.stopPropagation();
      const combobox = event.target;
      const selected = this.timeZoneGroups.find(({ offsetValue }) => combobox.value === `${offsetValue}`);
      const selectedValue = `${selected.offsetValue}`;
      if (this.value === selectedValue) {
        return;
      }
      this.value = selectedValue;
      this.selectedTimeZoneGroup = selected;
      this.calciteInputTimeZoneChange.emit();
    };
    this.onComboboxClose = (event) => {
      event.stopPropagation();
      this.open = false;
      this.calciteInputTimeZoneClose.emit();
    };
    this.onComboboxOpen = (event) => {
      this.open = true;
      event.stopPropagation();
      this.calciteInputTimeZoneOpen.emit();
    };
    this.disabled = false;
    this.form = undefined;
    this.messages = undefined;
    this.messageOverrides = undefined;
    this.name = undefined;
    this.open = false;
    this.overlayPositioning = "absolute";
    this.required = false;
    this.scale = "m";
    this.value = undefined;
    this.defaultMessages = undefined;
    this.effectiveLocale = "";
  }
  onMessagesChange() {
    /* wired up by t9n util */
  }
  valueWatcher(value) {
    if (this.comboboxEl && this.comboboxEl.value !== value) {
      this.comboboxEl.value = value;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async setFocus() {
    await componentFocusable(this);
    await this.comboboxEl.setFocus();
  }
  effectiveLocaleWatcher() {
    updateMessages(this, this.effectiveLocale);
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  onLabelClick() {
    this.setFocus();
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    connectForm(this);
    connectLabel(this);
    connectLocalized(this);
    connectMessages(this);
  }
  disconnectedCallback() {
    disconnectForm(this);
    disconnectLabel(this);
    disconnectLocalized(this);
    disconnectMessages(this);
  }
  async componentWillLoad() {
    setUpLoadableComponent(this);
    await setUpMessages(this);
    const timeZoneGroups = await generateTimeZoneGroups();
    this.timeZoneGroups = timeZoneGroups;
    const offsetToMatch = this.value ?? getUserTimeZoneOffset();
    this.selectedTimeZoneGroup = timeZoneGroups.find(({ offsetValue }) => 
    // intentional == to match string to number
    offsetValue == offsetToMatch);
    const selectedValue = `${this.selectedTimeZoneGroup.offsetValue}`;
    afterConnectDefaultValueSet(this, selectedValue);
    this.value = selectedValue;
  }
  componentDidLoad() {
    setComponentLoaded(this);
  }
  componentDidRender() {
    updateHostInteraction(this);
  }
  render() {
    return (h(Host, null, h("calcite-combobox", { clearDisabled: true, disabled: this.disabled, label: this.messages.chooseTimeZone, lang: this.effectiveLocale, onCalciteComboboxBeforeClose: this.onComboboxBeforeClose, onCalciteComboboxBeforeOpen: this.onComboboxBeforeOpen, onCalciteComboboxChange: this.onComboboxChange, onCalciteComboboxClose: this.onComboboxClose, onCalciteComboboxOpen: this.onComboboxOpen, open: this.open, overlayPositioning: this.overlayPositioning, scale: this.scale, selectionMode: "single",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setComboboxRef }, this.timeZoneGroups.map((group) => {
      const selected = this.selectedTimeZoneGroup === group;
      const label = group.offsetLabel;
      const value = group.offsetValue;
      return (h("calcite-combobox-item", { key: label, selected: selected, textLabel: label, value: `${value}` }));
    })), h(HiddenFormInputSlot, { component: this })));
  }
  static get delegatesFocus() { return true; }
  static get assetsDirs() { return ["assets"]; }
  get el() { return getElement(this); }
  static get watchers() { return {
    "messageOverrides": ["onMessagesChange"],
    "value": ["valueWatcher"],
    "effectiveLocale": ["effectiveLocaleWatcher"]
  }; }
};
InputTimeZone.style = inputTimeZoneCss;

export { InputTimeZone as calcite_input_time_zone };
