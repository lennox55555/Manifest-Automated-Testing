import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { LabelableComponent } from "../../utils/label";
import { InteractiveComponent } from "../../utils/interactive";
import { LocalizedComponent, SupportedLocale } from "../../utils/locale";
import { Scale } from "../interfaces";
import { T9nComponent } from "../../utils/t9n";
import { InputTimeZoneMessages } from "./assets/input-time-zone/t9n";
import { OverlayPositioning } from "../../utils/floating-ui";
import { LoadableComponent } from "../../utils/loadable";
import { FormComponent } from "../../utils/form";
export declare class InputTimeZone implements FormComponent, InteractiveComponent, LabelableComponent, LoadableComponent, LocalizedComponent, T9nComponent {
  /**
   * When `true`, interaction is prevented and the component is displayed with lower opacity.
   */
  disabled: boolean;
  /**
   * The ID of the form that will be associated with the component.
   *
   * When not set, the component will be associated with its ancestor form element, if any.
   */
  form: string;
  /**
   * Made into a prop for testing purposes only
   *
   * @internal
   */
  messages: InputTimeZoneMessages;
  /**
   * Use this property to override individual strings used by the component.
   */
  messageOverrides: Partial<InputTimeZoneMessages>;
  onMessagesChange(): void;
  /**
   * Specifies the name of the component.
   *
   * Required to pass the component's `value` on form submission.
   */
  name: string;
  /** When `true`, displays and positions the component. */
  open: boolean;
  /**
   * Determines the type of positioning to use for the overlaid content.
   *
   * Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.
   *
   * `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
   *
   */
  overlayPositioning: OverlayPositioning;
  /**
   * When `true`, the component must have a value in order for the form to submit.
   *
   * @internal
   */
  required: boolean;
  /** Specifies the size of the component. */
  scale: Scale;
  /**
   * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.
   *
   * If no value is provided, the user's time zone offset will be selected by default.
   *
   * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.
   */
  value: string;
  valueWatcher(value: string): void;
  setFocus(): Promise<void>;
  calciteInputTimeZoneBeforeClose: EventEmitter<void>;
  calciteInputTimeZoneBeforeOpen: EventEmitter<void>;
  calciteInputTimeZoneChange: EventEmitter<void>;
  calciteInputTimeZoneClose: EventEmitter<void>;
  calciteInputTimeZoneOpen: EventEmitter<void>;
  el: HTMLCalciteInputTimeZoneElement;
  private comboboxEl;
  defaultMessages: InputTimeZoneMessages;
  defaultValue: InputTimeZone["value"];
  effectiveLocale: SupportedLocale;
  effectiveLocaleWatcher(): void;
  formEl: HTMLFormElement;
  labelEl: HTMLCalciteLabelElement;
  private selectedTimeZoneGroup;
  private timeZoneGroups;
  onLabelClick(): void;
  private setComboboxRef;
  private onComboboxBeforeClose;
  private onComboboxBeforeOpen;
  private onComboboxChange;
  private onComboboxClose;
  private onComboboxOpen;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentWillLoad(): Promise<void>;
  componentDidLoad(): void;
  componentDidRender(): void;
  render(): VNode;
}
